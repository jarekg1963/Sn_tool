@page "/SNToolsMonitorsPage"
@inject HttpClient Http
@using Sn_tool.Shared.Data;
@using Syncfusion.Blazor.Cards;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Layouts;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.Popups;





<div class="alert alert-secondary" role="alert">
    <h3 class="h2Naglowek">Monitors</h3>
</div>



<SfSplitter Height="150px" Width="100%">
    <SplitterPanes>
        <SplitterPane Size="25%">
            <ContentTemplate>
                <div>
                    <div class="content">
                        <h3 class="h3">Serial No </h3>
                        <SfTextBox Placeholder="Serial number" @bind-Value="@sSerialNumber"></SfTextBox>
                    </div>
                </div>
            </ContentTemplate>
        </SplitterPane>
        <SplitterPane Size="25%">
            <div>
                <div class="content">
                    <h3 class="h3"> Delivery nr </h3>
                    <SfTextBox Placeholder="Delivery nr " @bind-Value="@sDN"></SfTextBox>
                </div>
            </div>
        </SplitterPane>
        <SplitterPane Size="25%">
            <div>
                <div class="content">
                    <h3 class="h3">Part no(Id) </h3>
                    <SfTextBox Placeholder="Part number" @bind-Value="@sPartNumber"></SfTextBox>
                </div>
            </div>
        </SplitterPane>
        <SplitterPane Size="25%">
            <div>
                <div class="content">
                    <h3 class="h3">Ship to name  </h3>
                    <SfTextBox Placeholder="Ship to name " @bind-Value="@sShipToName"></SfTextBox>
                </div>
            </div>
        </SplitterPane>
    </SplitterPanes>
</SfSplitter>

<SfButton CssClass="e-btn e-outline e-primary" OnClick="loadData">Select data</SfButton>
<div id="container"></div>
<SfSpinner @ref="SpinnerObj" Target="#container" CssClass="e-customClass" Label="Loading...." Width="50px">
</SfSpinner>


@if (listMNTSn.Count() > 0)
{
<div id="containerGrid">
  
        <SfGrid DataSource="@listMNTSn" @ref="DefaultGrid" AllowSorting="true" AllowExcelExport="true" AllowPaging="true">
            <GridPageSettings PageSizes="true"></GridPageSettings>
            <GridColumns>
                <GridEvents RowSelected="RowSelectHandler" TValue="SnMNT"></GridEvents>
                <GridColumn Field=@nameof(SnMNT.SerialNumber) HeaderText="Serial nr" TextAlign="TextAlign.Left" Width="70"></GridColumn>
                <GridColumn Field=@nameof(SnMNT.GoodsIssueDate) HeaderText="Issue Date" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(SnMNT.Plant) HeaderText="Plant" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                <GridColumn Field=@nameof(SnMNT.DN) HeaderText="DN" TextAlign="TextAlign.Left" Width="60"></GridColumn>
                <GridColumn Field=@nameof(SnMNT.ShipToName) HeaderText="Ship to name" TextAlign="TextAlign.Left" Width="180"></GridColumn>
                <GridColumn Field=@nameof(SnMNT.PartNumber) HeaderText="Part No " TextAlign="TextAlign.Left" Width="80"></GridColumn>
            </GridColumns>
        </SfGrid>
        <SfButton OnClick="ExcelExport" Content="Excel Export"></SfButton>
</div>

<SfDialog Width="1000" Height="500" IsModal="true" @bind-Visible="@IsVisibleMNT">
    <div class="container">
        <div class="row" style="height: 80px">
            <div class="col-12">
                <div class="alert alert-secondary" role="alert">
                    <h3 class="h2Naglowek" style="margin-left:400px">Details</h3>
                </div>
            </div>
        </div>
        <div class="row" style="height: 80px">
            <div class="col-4">
            <p>Serial No</p>
              <SfTextBox Value="@SnSerialNumber" Readonly="true"></SfTextBox>
        </div>
        <div class="col-4">
            <p>Plant</p>
            <SfTextBox Value="@SnPlant" Readonly="true"></SfTextBox>
        </div>
        <div class="col-4">
            <p>SAP Dn nymber</p>
            <SfTextBox Value="@SnDN" Readonly="true"></SfTextBox>
        </div>
        </div>

        <div class="row" style="height: 80px">
            <div class="col-12">
                <p>Ship to name </p>
                <SfTextBox Value="@SnSchipToName" Readonly="true"></SfTextBox>
            </div>
        </div>

        <div class="row" style="height: 80px">
            <div class="col-4">
            <p>Part number</p>
            <SfTextBox Value="@SnPartNumber" Readonly="true"></SfTextBox>
        </div>
        <div class="col-4">
            <p>Date goods issue </p>
          <SfTextBox Value="@SnGoodsIssueDate" Readonly="true"></SfTextBox>
        </div>

        </div>
        <div class="row" style="height: 80px">
            <div class="col-12">
                <p>File name </p>
                <SfTextBox Value="@SnFileName" Readonly="true"></SfTextBox>
            </div>
        </div>
        <div class="row" style="margin-left: 4px">
            <SfButton @onclick="CloseModal" CssClass="e-large">Close </SfButton>
        </div>
    </div>
</SfDialog>

    
}
<style>
    .e-spinner-pane.e-customClass .e-spinner-inner .e-spin-material {
        stroke: #808080;
    }

    .e-input-group.e-corner {
        border-radius: 10px !important;
    }

    .e-input-group {
        background: #d1d8e6 !important;
        color: blue !important;
    }

    .h2Naglowek {
        margin-left: 500px;
    }
</style>

@code {
    public string sDN = "";
    public string sPartNumber = "";
    public string sSerialNumber = "";
    public string sShipToName = "";
    SfSpinner SpinnerObj;
    private string Target { get; set; } = "#container";
    private SfGrid<SnMNT> DefaultGrid;
    public SnMNT[] SnMNTList = { };
    List<SnMNT> listMNTSn = new List<SnMNT>();
    private bool IsVisibleMNT { get; set; } = false;
    public int recNo;
    public string SnGoodsIssueDate = "";
    public string SnPlant = "";
    public string SnDN = "";
    public string SnSchipToName = "";
    public string SnPartNumber = "";
    public string SnSerialNumber = "";
    public string SnFileName = "";
    private bool IsVisible { get; set; } = false;

    async Task loadData()
    {
        SpinnerObj.ShowSpinner(Target);

        if (sSerialNumber.Trim().Length > 0)
        {
            string linktmp = "/api/SnMNTs/GetSnByMNTSn/" + sSerialNumber.Trim();
            Console.WriteLine("-----------link----------" + linktmp);
            SnMNTList = await Http.GetFromJsonAsync<SnMNT[]>(linktmp);
            listMNTSn = new List<SnMNT>(SnMNTList);
            recNo = listMNTSn.Count();
        }

        if (sDN.Trim().Length > 0)
        {
            string linktmp = "/api/SnMNTs/GetSnByMNTDn/" + sDN.Trim();
            Console.WriteLine("-----------link----------" + linktmp);
            SnMNTList = await Http.GetFromJsonAsync<SnMNT[]>(linktmp);
            listMNTSn = new List<SnMNT>(SnMNTList);
            recNo = listMNTSn.Count();

        }

        if (sPartNumber.Trim().Length > 0)
        {
            string linktmp = "/api/SnMNTs/GetSnByMNTPn/?MNTPn=" + System.Web.HttpUtility.UrlEncode(sPartNumber.Trim());
            Console.WriteLine("-----------link----------" + linktmp);
            SnMNTList = await Http.GetFromJsonAsync<SnMNT[]>(linktmp);
            listMNTSn = new List<SnMNT>(SnMNTList);
            recNo = listMNTSn.Count();
        }

        if (sShipToName.Trim().Length > 0)
        {
            ///api/SnMNTs/GetSnByMNTStn/
            string linktmp = "/api/SnMNTs/GetSnByMNTStn/" + sShipToName.Trim();
            Console.WriteLine("-----------link----------" + linktmp);
            SnMNTList = await Http.GetFromJsonAsync<SnMNT[]>(linktmp);
            listMNTSn = new List<SnMNT>(SnMNTList);
            recNo = listMNTSn.Count();

        }

        SpinnerObj.HideSpinner(Target);
    }


    public async Task ExcelExport()
    {
        ExcelExportProperties ExportProperties = new ExcelExportProperties();
        ExportProperties.ExportType = ExportType.AllPages;

        await this.DefaultGrid.ExcelExport(ExportProperties);
    }

    public void RowSelectHandler(RowSelectEventArgs<SnMNT> args)
    {
        this.IsVisibleMNT = true;

        SnGoodsIssueDate = args.Data.GoodsIssueDate.ToString();
        SnPlant = args.Data.Plant.ToString();
        SnDN = args.Data.DN.ToString();
        SnSchipToName = args.Data.ShipToName.ToString();
        SnPartNumber = args.Data.PartNumber.ToString();
        SnSerialNumber = args.Data.SerialNumber.ToString();
        
        if (args.Data.FileName is null)
        { SnFileName = ""; } else {
            SnFileName = args.Data.FileName.ToString(); }


        Console.WriteLine(" Wiesz wybor" + args.Data.ID.ToString());
    }


    private void CloseModal()
    {
        this.IsVisibleMNT = false;
    }
}

